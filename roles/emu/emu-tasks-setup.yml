---
- name: Initialize emulation
  include_tasks: "../emu/emu-tasks-init.yml"


# Configure OVS-Emu Bridge
#
- block:
    - name: Drop all OVS bridges (except o-all)  # to achieve a clean state
      shell: for bridge in `sudo ovs-vsctl list-br`; do if [ "$bridge" != o-all ]; then sudo ovs-vsctl del-br $bridge; fi; done
      become: true

    # Note: Locally administered MAC addresses follow this pattern: x2‑xx‑xx‑xx‑xx‑xx
    # See:  https://en.wikipedia.org/wiki/MAC_address#Universal_addresses_that_are_administered_locally
    #
    - name: Create OVS Bridge  # sudo ovs-vsctl add-br {bridge}  # permanent
      openvswitch_bridge:
        bridge: "o-{{ item.key }}"
        state: present
        # fail_mode=secure: bridge will do nothing without my own controller running!
        # fail_mode=standalone: OVS will use default switching rules when no controller is connected
        #
        fail_mode: "{{ 'secure' if item.value.ctrl is defined else 'standalone' }}"
        set: "bridge o-{{ item.key }} other-config:hwaddr=\"02:00:00:00:00:{{ '%02d'| format(item.value.dpid) }}\""
      loop: '{{ emu.switches | dict2items }}'

    - name: Set controller  # sudo ovs-vsctl set-controller {bridge} tcp:127.0.0.1:6633  # permanent
      command: "ovs-vsctl set-controller o-{{ item.key }} {{ item.value.ctrl }}"
      loop: '{{ emu.switches | dict2items }}'
      when: item.value.ctrl is defined

    - name: Add ports to nodes  # sudo ovs-vsctl add-port {bridge} eth0.x  # permanent
      openvswitch_port:
        bridge: "o-{{ item.src }}"
        port: "{{ hostvars.gateway.nic_int }}.{{ hostvars[emu.hosts[item.dest].node].ansible_host.split('.')[3] }}"
        state: present
      when: item.src in emu.switches and item.dest in emu.hosts
      loop: "{{ emu.links }}"

    - name: Add patch ports between bridges  
      openvswitch_port:
        bridge: "o-{{ item.src }}"
        port: "{{ item.src }}-{{ item.dest }}"
        set: "interface {{ item.src }}-{{ item.dest }} type=patch options:peer={{ item.dest }}-{{ item.src }}"
        state: present
      when: item.src in emu.switches and item.dest in emu.switches
      loop: "{{ emu.links }}"

    - name: Add patch ports between bridges (reverse)
      openvswitch_port:
        bridge: "o-{{ item.dest }}"
        port: "{{ item.dest }}-{{ item.src }}"
        set: "interface {{ item.dest }}-{{ item.src }} type=patch options:peer={{ item.src }}-{{ item.dest }}"
        state: present
      when: item.src in emu.switches and item.dest in emu.switches
      loop: "{{ emu.links }}"

    - name: Set IP address on public gateway  # sudo ip addr add 10.0.0.0/16 dev o-gw
      command: "ip addr add 10.0.0.1/16 dev o-{{ emu_public_gateway }}"

    - name: Start public gateway interface
      command: "ip link set o-{{ emu_public_gateway }} up"

  become: true
  when: inventory_hostname == "gateway"


- block:
    - name: Remove all IP addresses from emu interface
      command: "ip addr flush dev eth0.{{ ansible_host.split('.')[3] }}"

    - name: Set IP address on node  # sudo ip addr add 10.0.x.x/16 dev eth0.x
      command: "ip addr add {{ emu_ip }} dev eth0.{{ ansible_host.split('.')[3] }}"

    - name: Set MAC addresses of virtual nodes
      command: "ip link set eth0.{{ ansible_host.split('.')[3] }} address {{ emu_mac }}"
      # command: "ip link set eth0.{{ ansible_host.split('.')[3] }} address 02:00:00:00:{{ '%02d' | format(int(emu.hosts[item.key].ip.split('.')[0])) }}:{{ '%02x' | format(int(emu.hosts[item.key].ip.split('.')[1])) }}"


    - name: Add emu gateway  # sudo ip route replace default via 10.0.0.1 dev eth0.x
      # remove again: sudo ip route del default via 10.0.0.1 dev eth0.x
      command: "ip route replace default via 10.0.0.1 dev eth0.{{ ansible_host.split('.')[3] }}"

    # Dropping the default route does not work -- gets re-added by dhcpcd
    # sudo ip route del default via 10.42.0.1 dev eth0
    #
    - name: Block default gateway for nodes (via eth0)  
      # insert: sudo iptables -I FORWARD -i eth0 -o wlan0 -j DROP  
      # delete: sudo iptables -D FORWARD -i eth0 -o wlan0 -j DROP  
      #
      # delete on Ubuntu: sudo iptables -D FORWARD -i enp6s0 -o enp5s0 -j DROP
      #
      # https://unix.stackexchange.com/questions/109459/is-it-better-to-set-j-reject-or-j-drop-in-iptables
      shell: iptables -I FORWARD -s {{ ansible_host }} -i {{ hostvars['gateway']['ifnodes'] }} -o {{ hostvars['gateway']['nic_ext'] }} -j REJECT # DROP
      delegate_to: 127.0.0.1

  become: true
  when: not inventory_hostname == "gateway"


- block:
    - name: Export local emu info (1/2)
      lineinfile:
        path: /home/{{ hostvars[inventory_hostname].ansible_user }}/.bashrc
        regexp: '^source .emu_vars'
        line: "source .emu_vars"
        state: present

    - name: Export local emu info (2/2)
      blockinfile:            
        path: /home/{{ hostvars[inventory_hostname].ansible_user }}/.emu_vars
        marker: "# {mark} EMULATION NODE"
        block: |
          export EMU_NAME={{ emu_name }}
          export EMU_IP={{ emu_ip.split('/')[0] }}
        state: present
        create: yes

  when: not inventory_hostname == "gateway"


- name: Set all emu host names (on nodes)
  blockinfile:            
    path: /etc/hosts
    marker: "# {mark} EMULATION NODES"
    block: |
      {% for host in emu.hosts %}
          10.0.{{ emu.hosts[host].ip.split('/')[0] }} {{ host }}
      {% endfor %}
    state: present
  become: true
  when: not inventory_hostname == "gateway"


- name: Set all emu host names (real IPs on gateway)
  blockinfile:            
    path: /etc/hosts
    marker: "# {mark} EMULATION NODES"
    block: |
      {% for host in emu.hosts %}
          {{ hostvars[emu.hosts[host].node].ansible_host }} {{ host }}
      {% endfor %}
    state: present
  become: true
  when: inventory_hostname == "gateway"


