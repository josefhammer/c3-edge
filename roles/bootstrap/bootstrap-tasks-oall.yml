---
- name: Calculate vars to make conditional tasks easier
  set_fact:
    ovsall: "{{ 'present' if hostvars.gateway.usevlan and (hostvars.gateway.nic_int != hostvars.gateway.ifnodes) else 'absent' }}"


# Install OVS
- name: Install OVS
  apt:
    pkg: 
      - openvswitch-switch 
      - openvswitch-testcontroller 
      - openvswitch-common
    state: present
    update_cache: yes
    cache_valid_time: 36000
  become: true


# Configure OVS-All Bridge (if gateway.ifnodes != gateway.nic_int)
#
- block:
    - name: Drop OVS Bridge if it exists already  # to achieve a clean state
      openvswitch_bridge:
        bridge: "{{ hostvars.gateway.ifnodes }}"
        state: absent

    - block:
        - name: Create OVS Bridge  # sudo ovs-vsctl add-br {bridge}  # permanent
          openvswitch_bridge:
            bridge: "{{ hostvars.gateway.ifnodes }}"
            state: present

        - name: Add ports to nodes  # sudo ovs-vsctl add-port {bridge} eth0.x  # permanent
          openvswitch_port:
            bridge: "{{ hostvars.gateway.ifnodes }}"
            port: "{{ hostvars.gateway.nic_int }}.{{ hostvars[item].ansible_host.split('.')[3] }}"
            state: present
          loop: '{{ query("inventory_hostnames", "nodes:jetsons") }}'

      when: ovsall == 'present'

    ## Show available ports: sudo ovs-vsctl list-ports o-all
    ## Delete port: sudo ovs-vsctl del-port o-all {port}
    ## https://www.opencloudblog.com/?p=240
      

    - name: Set static IP address for ovs-vlan-bridge  # sudo ifconfig o-all 10.42.0.1/24
      blockinfile:                                     # sudo ip route add 10.42.0.0/24 dev o-all
        path: /etc/dhcpcd.conf
        marker: "# {mark} OVS-VLAN-BRIDGE"
        block: |
          interface {{ hostvars.gateway.ifnodes }}
          static ip_address={{ hostvars['gateway'].int_cidr }}
        state: "{{ ovsall }}"
      notify: reboot

    - name: Drop static IP address of eth0  # the IP address set via /boot on the SD card
      lineinfile:
        path: /etc/rc.local
        regexp: '^ip addr flush dev {{ hostvars.gateway.nic_int }}'
        line: 'ip addr flush dev {{ hostvars.gateway.nic_int }}'   
        insertbefore: exit 0
        state: "{{ ovsall }}"
      notify: reboot

  become: true
  when: ansible_facts['architecture'] != "x86_64"  # Raspberry Pi gateway only
